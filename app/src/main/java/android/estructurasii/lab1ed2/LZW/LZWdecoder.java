/*
 * Ragavendran Balaji
 * --------------------------------------------------------------------------------------------------------------
 * ITCS 6114 : ALGORITHMS AND DATA STRUCTURE *
 * NAME:	Ragavendran Balaji
 * ID:		800853917
 * EMAIL:	rbalaji1@uncc.edu
 * 
 * --------------------------------------------------------------------------------------------------------------
 * PROJECT1 - LZW encoding and decoding
 * 
 * 
 */

// LZWdecoder.java
import java.io.DataInputStream;			// read from binary file
import java.io.File;					// for file operations
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;				// for writing output to file
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;				//arraylist functionalities
import java.util.Scanner;

public class LZWdecoder {
	
	private ArrayList<String> table;		// arraylist "table" for storing all symbols 
	private double MAX;						// max size of the table using input N
	private ArrayList<String> output;				// "output" arraylist for the output code after decoding 
	
	
	
	// SETTERS AND GETTERS FOR THE PRIVATE VARIABLES
	public ArrayList<String> getTable() {
		return table;
	}



	public void setTable(ArrayList<String> table) {
		this.table = table;
	}



	public double getMAX() {
		return MAX;
	}



	public void setMAX(double mAX) {
		MAX = mAX;
	}



	public ArrayList<String> getOutput() {
		return output;
	}



	public void setOutput(ArrayList<String> output) {
		this.output = output;
	}



	// CONSTRUCTOR THAT INITIALIZES THE TABLE WITH 256 CHARACTERS OF THE ASCII TABLE
	LZWdecoder(String max){
		
		double x = Double.parseDouble(max);
		
		this.MAX = Math.pow(2,x);			// maximum size of the table 2^N
		this.output = new ArrayList<String>();
		this.table = new ArrayList<String>();
		char c;
		String s;
		for(int i=0; i<256; i++){		// initializing the table with tha ascii table
			c = (char)i;
			s = c + "";					// converting the character to a string
			this.table.add(s);
		}
		
	}

	
	// MAIN METHOD WHERE ENCODING IS DONE BY READING A FILE AND BIT LENGTH SPECIFIED IN THE ARGUMENTS
	public static void main(String[] args){
		
		LZWdecoder lzw = new LZWdecoder(args[1]);		// creating an object of LZWdecoder thus invoking the constructor and initializing the table
		ArrayList<Integer> code = new ArrayList<Integer>();	//integer arraylist for input code
		char c;
		int index;
		
		String s = new String();
		String ns = new String();
		
		
		// try catch to handle exception generated by DataInputStream
		try {
			InputStream file = new FileInputStream(args[0]);
			DataInputStream dis = new DataInputStream(file);	//creating DataInputStream object to access binary file in the arguments
			
				while(dis.available() > 0){
					
					int sh = dis.readShort();		// read two bytes form of the input code and put the integer in the "code" arraylist
					code.add(sh);
					
				}
				
				
		// DECODING ALGORITHM	
				
		index = code.get(0);			// to consider invalid encoding
		if(index == -1)
			index = 35;
			
		s = lzw.table.get(index);		// read the first code and output the corresponding symbol from the table
		lzw.output.add(s);
	
		for(int i=1; i<code.size(); i++){		// for the rest of the codes available in the code aaraylist
			
			index = code.get(i);		//to cosider invalid encoding
			if(index == -1)
				index = 35;
			
			if(lzw.table.size()-1 < index)		// if the code is larger than the size of the table then add the new string to the table
				ns = s + s.charAt(0);
			else{
				ns = lzw.table.get(index);		// else the new string is the string from the table
			}
			
			
			lzw.output.add(ns);			//output the string corresponding to the code
			//System.out.println(s + ns);
			if(lzw.table.size() < lzw.MAX)
				lzw.table.add(s + ns.charAt(0));
			
			s = ns;
			
		}
				
			// PRINTING THE OUTPUT ON THE SCREEN
			System.out.println("----------");
			String outs = new String();
			for(int i=0; i<lzw.output.size(); i++){
				outs = outs + lzw.output.get(i);
			}
			
			System.out.println(outs);
			
			
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		
		// try catch block to handle exceptions generated by PrintWriter
		try {
			
			String path = args[0];
			path = path.substring(0, path.lastIndexOf("."));		// removing the extension from the input file from arguments
			// creating an object of PrintWriter to write the decoded output
			PrintWriter write = new PrintWriter(path + "_decoded.txt", "UTF-8"); 	// creating a new file with extension "_decoded.txt"
			
			String out = new String();
			for(int i=0; i<lzw.output.size(); i++){		// creating a string with the encoded output in sequence seperated by ","
				out = out + lzw.output.get(i);
			}
			
			write.println(out);		// writing the string "out" to the file
			write.close();
			
			
			
		} catch (FileNotFoundException | UnsupportedEncodingException e) {
			System.out.println("---EXECPTION OCCURED---");
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}

